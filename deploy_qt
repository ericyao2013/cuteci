#!/usr/bin/env python3

"""
Deploy Qt
"""

import sys
import os
import stat
import argparse
from urllib.request import urlopen
import hashlib
import re
import subprocess

WORKING_DIR = os.getcwd()
CURRENT_DIR = os.path.dirname(os.path.realpath(__file__))
MD5SUMS_FILENAME = "md5sums.txt"
DEFAULT_INSTALL_SCRIPT = os.path.join(CURRENT_DIR, "scripts", "install-5.12.qs")
INSTALL_TIMEOUT = 120  # 2 minutes

EXIT_OK = 0
EXIT_ERROR = 1
EXIT_BAD_ARGS = 2


def _download_qt(qt_url):
    filename = qt_url[qt_url.rfind("/")+1:]
    md5sums_url = qt_url[:qt_url.rfind("/")] + "/" + MD5SUMS_FILENAME

    qt_installer = os.path.join(WORKING_DIR, filename)

    # Download Qt
    print("Download Qt", qt_url)

    hash_md5 = hashlib.md5()
    with open(qt_installer, "wb") as qt_installer_file:
        req = urlopen(qt_url)
        length = int(req.getheader("content-length", 1500000000))
        size = 0
        while True:
            chunk = req.read(4096)
            if not chunk:
                break
            size += len(chunk)
            hash_md5.update(chunk)
            qt_installer_file.write(chunk)
            print("\rFetched {:.2f}%".format(size*100/length), end="")

    # Download md5sums and check
    print()
    print("Download md5sums", md5sums_url)
    response = urlopen(md5sums_url)
    print("Check md5sums")
    if hash_md5.hexdigest() not in str(response.read()):
        print("Checksums do not match")
        return EXIT_ERROR

    print("Download OK", qt_installer)
    return qt_installer


def _get_major_minor_ver(qt_installer):
    # qt-opensource-windows-x86-5.12.2.exe
    # qt-opensource-mac-x64-5.12.2.dmg
    # qt-opensource-linux-x64-5.12.2.run
    basename = os.path.basename(qt_installer)
    res = re.search(r"-(\d+\.\d+)\.", basename)
    return res.group(1)


def _get_install_script(version):
    path = os.path.join(CURRENT_DIR, "scripts", "install-{}.qs".format(version))
    if not os.path.exists(path):
        print("Unsupported Qt version, fallback to", DEFAULT_INSTALL_SCRIPT)
        path = DEFAULT_INSTALL_SCRIPT
    return path


def _run_installer(qt_installer, headless, env):
    version = _get_major_minor_ver(qt_installer)
    install_script = _get_install_script(version)
    cmd = [qt_installer, "--verbose", "--script", install_script]
    if headless:
        cmd.extend(["--platform", "minimal"])

    proc = subprocess.Popen(cmd, stdout=sys.stdout, stderr=sys.stderr, env=env)
    try:
        print("Running installer", cmd)
        proc.wait(INSTALL_TIMEOUT)
    except:
        print("Timeout while waiting for the installer, kill it")
        proc.kill()
        return EXIT_ERROR
    return EXIT_OK


def _list_packages(qt_installer, headless):
    env = os.environ.copy()
    env["LIST_PACKAGE_ONLY"] = "1"
    return _run_installer(qt_installer, headless, env)


def _install(qt_installer, packages, destdir, headless):
    env = os.environ.copy()
    env["PACKAGES"] = packages
    env["DESTDIR"] = destdir
    return _run_installer(qt_installer, headless, env)


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--installer", required=True, help="Path or url to Qt installer")
    parser.add_argument("--list-packages", action="store_true", help="List available packages")
    parser.add_argument("--packages", help="Comma separated list of package to install")
    parser.add_argument("--destdir", help="Path to install Qt, e.g.: /opt/Qt")
    parser.add_argument("--headless", action="store_true", help="No GUI displayed")
    args = parser.parse_args()

    installer = args.installer
    list_packages = args.list_packages
    packages = args.packages
    destdir = args.destdir
    headless = bool(args.headless)

    if list_packages and (packages or destdir):
        parser.print_help()
        return EXIT_BAD_ARGS
    if packages and not destdir or not packages and destdir:
        parser.print_help()
        return EXIT_BAD_ARGS
    if not list_packages and not packages and not destdir:
        parser.print_help()
        return EXIT_BAD_ARGS

    qt_installer = installer
    if installer.startswith("http"):
        qt_installer = _download_qt(installer)
    os.chmod(qt_installer, os.stat(qt_installer).st_mode | stat.S_IEXEC)

    if list_packages:
        ret = _list_packages(qt_installer, headless)
        if ret == EXIT_OK:
            print("Available packages are printed above")
        return ret

    return _install(qt_installer, packages, destdir, headless)

if __name__ == "__main__":
    sys.exit(main())
